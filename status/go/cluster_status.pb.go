// Code generated by protoc-gen-go.
// source: cluster_status.proto
// DO NOT EDIT!

/*
Package clusterstatus is a generated protocol buffer package.

It is generated from these files:
	cluster_status.proto

It has these top-level messages:
	HostsRequest
	HostReply
*/
package clusterstatus

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HostReply_HostStatus int32

const (
	HostReply_STOPPED HostReply_HostStatus = 0
	HostReply_PENDING HostReply_HostStatus = 1
	HostReply_MIXED   HostReply_HostStatus = 2
	HostReply_STARTED HostReply_HostStatus = 3
)

var HostReply_HostStatus_name = map[int32]string{
	0: "STOPPED",
	1: "PENDING",
	2: "MIXED",
	3: "STARTED",
}
var HostReply_HostStatus_value = map[string]int32{
	"STOPPED": 0,
	"PENDING": 1,
	"MIXED":   2,
	"STARTED": 3,
}

func (x HostReply_HostStatus) String() string {
	return proto.EnumName(HostReply_HostStatus_name, int32(x))
}
func (HostReply_HostStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type HostsRequest struct {
}

func (m *HostsRequest) Reset()                    { *m = HostsRequest{} }
func (m *HostsRequest) String() string            { return proto.CompactTextString(m) }
func (*HostsRequest) ProtoMessage()               {}
func (*HostsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type HostReply struct {
	Hostname string               `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Port     int32                `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
	Status   HostReply_HostStatus `protobuf:"varint,3,opt,name=status,enum=clusterstatus.HostReply_HostStatus" json:"status,omitempty"`
}

func (m *HostReply) Reset()                    { *m = HostReply{} }
func (m *HostReply) String() string            { return proto.CompactTextString(m) }
func (*HostReply) ProtoMessage()               {}
func (*HostReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HostReply) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *HostReply) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *HostReply) GetStatus() HostReply_HostStatus {
	if m != nil {
		return m.Status
	}
	return HostReply_STOPPED
}

func init() {
	proto.RegisterType((*HostsRequest)(nil), "clusterstatus.HostsRequest")
	proto.RegisterType((*HostReply)(nil), "clusterstatus.HostReply")
	proto.RegisterEnum("clusterstatus.HostReply_HostStatus", HostReply_HostStatus_name, HostReply_HostStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ClusterStatus service

type ClusterStatusClient interface {
	ListHosts(ctx context.Context, in *HostsRequest, opts ...grpc.CallOption) (ClusterStatus_ListHostsClient, error)
}

type clusterStatusClient struct {
	cc *grpc.ClientConn
}

func NewClusterStatusClient(cc *grpc.ClientConn) ClusterStatusClient {
	return &clusterStatusClient{cc}
}

func (c *clusterStatusClient) ListHosts(ctx context.Context, in *HostsRequest, opts ...grpc.CallOption) (ClusterStatus_ListHostsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ClusterStatus_serviceDesc.Streams[0], c.cc, "/clusterstatus.ClusterStatus/ListHosts", opts...)
	if err != nil {
		return nil, err
	}
	x := &clusterStatusListHostsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ClusterStatus_ListHostsClient interface {
	Recv() (*HostReply, error)
	grpc.ClientStream
}

type clusterStatusListHostsClient struct {
	grpc.ClientStream
}

func (x *clusterStatusListHostsClient) Recv() (*HostReply, error) {
	m := new(HostReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ClusterStatus service

type ClusterStatusServer interface {
	ListHosts(*HostsRequest, ClusterStatus_ListHostsServer) error
}

func RegisterClusterStatusServer(s *grpc.Server, srv ClusterStatusServer) {
	s.RegisterService(&_ClusterStatus_serviceDesc, srv)
}

func _ClusterStatus_ListHosts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HostsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ClusterStatusServer).ListHosts(m, &clusterStatusListHostsServer{stream})
}

type ClusterStatus_ListHostsServer interface {
	Send(*HostReply) error
	grpc.ServerStream
}

type clusterStatusListHostsServer struct {
	grpc.ServerStream
}

func (x *clusterStatusListHostsServer) Send(m *HostReply) error {
	return x.ServerStream.SendMsg(m)
}

var _ClusterStatus_serviceDesc = grpc.ServiceDesc{
	ServiceName: "clusterstatus.ClusterStatus",
	HandlerType: (*ClusterStatusServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListHosts",
			Handler:       _ClusterStatus_ListHosts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cluster_status.proto",
}

func init() { proto.RegisterFile("cluster_status.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0x41, 0x4b, 0xc3, 0x40,
	0x10, 0x85, 0xbb, 0xad, 0xad, 0x66, 0xb4, 0x25, 0x2c, 0x1e, 0x42, 0xbd, 0x84, 0x88, 0x90, 0xd3,
	0x22, 0xf5, 0x28, 0x0a, 0xd6, 0x44, 0x2d, 0x68, 0x5d, 0xb6, 0x05, 0xbd, 0x49, 0x0c, 0x2b, 0x16,
	0x52, 0x37, 0xee, 0x4e, 0x84, 0xfe, 0x33, 0x7f, 0x9e, 0x64, 0x13, 0x23, 0x01, 0x7b, 0x9b, 0xf9,
	0x98, 0x79, 0x6f, 0xe6, 0xc1, 0x61, 0x9a, 0x15, 0x06, 0xa5, 0x7e, 0x31, 0x98, 0x60, 0x61, 0x58,
	0xae, 0x15, 0x2a, 0x3a, 0xac, 0x69, 0x05, 0x83, 0x11, 0x1c, 0xdc, 0x29, 0x83, 0x46, 0xc8, 0xcf,
	0x42, 0x1a, 0x0c, 0xbe, 0x09, 0x38, 0x25, 0x10, 0x32, 0xcf, 0x36, 0x74, 0x0c, 0x7b, 0xef, 0xca,
	0xe0, 0x47, 0xb2, 0x96, 0x1e, 0xf1, 0x49, 0xe8, 0x88, 0xa6, 0xa7, 0x14, 0x76, 0x72, 0xa5, 0xd1,
	0xeb, 0xfa, 0x24, 0xec, 0x0b, 0x5b, 0xd3, 0x73, 0x18, 0x54, 0xba, 0x5e, 0xcf, 0x27, 0xe1, 0x68,
	0x72, 0xcc, 0x5a, 0x6e, 0xac, 0x51, 0xb6, 0xd5, 0xc2, 0x42, 0x51, 0xaf, 0x04, 0x97, 0x00, 0x7f,
	0x94, 0xee, 0xc3, 0xee, 0x62, 0xf9, 0xc8, 0x79, 0x1c, 0xb9, 0x9d, 0xb2, 0xe1, 0xf1, 0x3c, 0x9a,
	0xcd, 0x6f, 0x5d, 0x42, 0x1d, 0xe8, 0x3f, 0xcc, 0x9e, 0xe3, 0xc8, 0xed, 0x56, 0x43, 0x57, 0x62,
	0x19, 0x47, 0x6e, 0x6f, 0xf2, 0x04, 0xc3, 0xeb, 0xca, 0xad, 0x96, 0xb8, 0x01, 0xe7, 0x7e, 0x65,
	0xd0, 0xfe, 0x47, 0x8f, 0xfe, 0x39, 0xe5, 0xf7, 0xeb, 0xb1, 0xb7, 0xed, 0xce, 0xa0, 0x73, 0x4a,
	0xa6, 0x17, 0x70, 0x92, 0xaa, 0x35, 0x4b, 0x33, 0xa9, 0x58, 0x9a, 0x25, 0x7a, 0xf5, 0xb6, 0x61,
	0x46, 0xea, 0x2f, 0xa9, 0xdb, 0x6b, 0x53, 0xda, 0xf2, 0xe7, 0x65, 0xde, 0x9c, 0xbc, 0x0e, 0x6c,
	0xf0, 0x67, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xe9, 0xb2, 0xdf, 0x90, 0x01, 0x00, 0x00,
}
